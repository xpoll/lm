logging:
  file: ${user.home}/logs/galaxy/standalone-web.log
  level.*: INFO
  level.io.terminus: DEBUG

server:
  context-path: /
  port: 8080

pampas:
  rootPath: ${user.home}/assets
  apps:
    - key: PC
      assetsHome: feebas
  mvc:
    ignoreInterceptors:
      - Login
      - Auth
    customInterceptors:
      - loginInterceptor
      - authInterceptor
  redis:
    host: 127.0.0.1
    port: 6379
  design:
    enable: true
  locale: zh_CN
  devMode: true

session:
  cookie-domain: galaxy.dev
  cookie-context-path: /
  cookie-name: msid
  cookie-max-age: 1800
  source: redis
  serialize-type: json
  redis-host: 127.0.0.1
  redis-port: 6379
  redis-index: 1
  redis-cluster: false
  redis-test-on-borrow: true
  redis-max-total: 10
  redis-max-idle: 0
  redis-prefix: afsession

## ItemDumper 用到了
zookeeper:
  host: 127.0.0.1
  port: 2181

image:
  base:
    url: http://terminus.oss-cn-hangzhou.aliyuncs.com

oss:
  endpoint: oss-cn-hangzhou.aliyuncs.com
  appKey: ~~removed~~
  appSecret: ~~removed~~
  bucketName: terminus

parana:
  config:
    mode: server

pay:
  debug: true


mybatis:
  mapperLocations: classpath*:mapper/*Mapper.xml
  typeAliasesPackage: >
    cn.blmdz.wolf.(item|shop|category|spu|brand|user).model,
    cn.blmdz.wolf.(order|cart).model,cn.blmdz.rabbit.order.model,
    cn.blmdz.wolf.(user|file|article|user.address).model,cn.blmdz.rabbit.user.model,
    cn.blmdz.wolf.msg.model,
    cn.blmdz.wolf.pay.model,
    cn.blmdz.wolf.pay.mock.model

datasource:
  driver-class-name: com.mysql.jdbc.Driver
  url: jdbc:mysql://127.0.0.1:3306/b2b2c?useUnicode=true&characterEncoding=UTF8
  username: b2b2c
  password: anywhere

redis:
  host: 127.0.0.1
  port: 6379
  max-total: 10
  max-idle: 2
  test-on-borrow: true

item:
  search:
    index-name: items
    index-type: item
    mapping-path: item_mapping.json
    full-dump-range: 3
    batch-size: 100

search:
  host: 127.0.0.1
  port: 9200

alipay:
  pid: pid
  key: key
  account: account
  gateway: http://b2b2c.com/api/mock/alipay/gateway
  wap.gateway: http://b2b2c.com/api/mock/alipay/gateway
  notify.url: http://b2b2c.com/api/alipay/notify
  return.url: http://b2b2c.com/buyer/trade-success
  refund.notify.url: http://b2b2c.com/api/alipay/refund/notify
  refund.type: 2 #无密
  wap.version: 2 #新版

wechat:
  appid: appid
  secret: secret
  mchid: mchid
  partner.key: partnerKey
  gateway: http://b2b2c.com/api/mock/wechatpay/gateway
  refund.gateway:
  download.bill.url:
  query.refund.gateway:
  caFilePath:
  certFilePath:
  notifyUrl:
  returnUrl:
  imageBaseUrl:
  token:
  publicName:

msg:
  test.enabled: true  #启用测试MsgWebService的Controller, 用于快速测试网关配置是否有问题
    #http://www.galaxy.com/api/msg/sendSms?toes=18667045530&template=user.register.code&code=123456
    #http://www.galaxy.com/api/msg/sendNotice?toes=1&template=user.register.code&code=123456
    #http://www.galaxy.com/api/msg/sendEmail?toes=a@terminus.io&template=user.register.code&code=123456
    #http://www.galaxy.com/api/msg/sendAppMessage?toes=[1]&template=user.register.code&code=123456

  gateway.version: simple #MsgGatewayBuilder的版本, 指定网关配置信息的来源, 可为simple和db, 最好采用simple版本.

  gateway.sms: #包含的短信网关实现bean
    aliSmsService:
  gateway.email: #包含的邮件网关实现bean
    sendCloudEmailService:
  gateway.apppush: #包含的app消息推送实现bean
    umengAppPushServiceIos:
    umengAppPushServiceAndroid:

  current: #配置当前的网关,用于在多个网关中选择一个实现
      smsService: aliSmsService #当前的短信网关服务, 现有的实现为阿里大鱼
      emailService: sendCloudEmailService #当前的邮件网关服务
      appPushService: umengAppPushService #当前的app消息推送网关服务

  webservice.version: db
     #指定是否使用Message, MessageTemplate等数据库表, db时使用, simple时不使用
     #当simple时: 在resources的template/title和template/content目录下配置消息模板, 消息发送和错误时只打日志
     #当db时, 在parana_message_templates中配置消息模板, 消息发送和错误时会记录在parana_messages表中.
  webservice.channel: #WEB层开启的消息服务, 在Controller中可以用@Qualifier("smsWebService")方式指明注入的MsgWebService
    sms: #开启WEB层短信服务 SmsWebService, 使用时@Qualifier("smsWebService")
    email: #开启WEB层邮件服务 EmailWebService, 使用时@Qualifier("emailWebService")
    notify: #开启WEB层站内信服务 NotifyWebService, 使用时@Qualifier("notifyWebService")
    apppush: #开启WEB层APP消息推送服务 AppPushWebService, 使用时@Qualifier("appPushWebService")


  #当gateway.version=db时, 在数据库中配置以下信息
  alisms: #阿里大鱼短信网关的配置
    smsUrl: http://gw.api.taobao.com/router/rest # 默认值
    version: 2.0 # 默认值
    appKey: xxxxx   # 以JVM环境变量的方式注入, 在IDEA中设置如下: -Dmsg.alisms.appKey=xxxxx  -Dmsg.alisms.appSecret=xxxx
    appSecret: xxxx
  sendcloud: #sendcloud邮件网关的配置
    user: no-reply@terminus.io
    triggerUser: terminus_test_no_reply
    batchUser: sendcloud.batch.user
    key: xxx # 以JVM环境变量的方式注入, 在IDEA中设置如下: -Dsendclound.key=xxxxx
    gateway: http://sendcloud.sohu.com/webapi/mail.send.json
  umeng: #友盟APP消息推送网关配置
    android: #Android应用配置
      appKey: xxxx
      appSecret: xxxx
    ios: #IOS应用配置
      appKey: xxxx
      appSecret: xxxx
